WHAT IS TYPESCRIPT
    - TypeScript is a superset of JavaScript, meaning that it does everything that JavaScript does, but with some added features.
    - The main reason for using TypeScript is to add static typing to JavaScript. 
    - Static typing means that the type of a variable cannot be changed at any point in a program. It can prevent a LOT of bugs!
    - JavaScript is a dynamically typed lanaguage meaning variables can change their type. 
        - Example: 
        // JavaScript
        let daphne = 'Hello, world'
        daphne = 25 // daphne has changed from a string to a number which is a no  problem 
        - Where as TypeScript
        let daphne = 'Hello, world'
        daphne = 25 // Error: daphne cannot be changed from a string to number 
    - TypeScript cannot be understood by browsers so it is complied to JavaScript.

Why use TypeScript instead?
    - TypeScript can spot 15% of common bugs.
    - Readability – it is easier to see what the code it supposed to do. And when working in a team, it is easier to see what the other developers intended to
Drawbacks - TypeScript has to be compiled – which can take time, especially in larger projects.


Compile Typescript 
    - Write a typescript file like index.ts
    - In the terminal type tsc with the file name i.e tsc index
    - It will compile a js file called index.js
    - Towatch for changes and compile automatically 
        - tsc index.ts-w

TS config file 
    - The ts config file should be in the root directory of your project
    - In this file we can specify the root files, compiler options, and how strict we want TypeScript to be in checking our project.
    - To create a ts config file 
        - tsc --init


Types in TypeScript
    - Primitive Types: In JavaScript, a primitive value is data that is not an object and has no methods.
        - string
        - number
        - bigint
        - boolean
        - undefined
        - null
        - symbol
        - Primitives are immutable: they can't be altered.
        - The variable may be reassigned a new value, but the existing value can't be changed in the ways that objects,arrays, and functions can be altered.
    
    - we can set the type we want a variable to be be adding " : type "
    -  A union type is a variable that can be assigned more than one type:

    - Reference Types
        - Arrays, Objects and functions
    
Interfaces
    - In TypeScript, an interface is a way to define a set of related properties and methods that a type should have. 
    - It's like a blueprint or a contract that defines what properties and methods an object should have.     
    - Example 
        - interface Person {
            name: string;
            age: number;
            }

Classes : a class is a blueprint for creating objects with a specific set of properties and methods.
    - A class in TypeScript consists of a constructor method and one or more methods and properties.
    - The constructor method is used to create and initialize an object of the class, and the methods and properties define the behavior and characteristics of the object.
    - Example 
        class Person {
            firstName: string;
            lastName: string;

            constructor(firstName: string, lastName: string) {
                this.firstName = firstName;
                this.lastName = lastName;
            }

            getFullName(): string {
                return this.firstName + " " + this.lastName;
            }
            }

            const person = new Person("John", "Doe");
            console.log(person.getFullName()); // logs "John Doe"

Difference between a class and an interface 
    - A class is a blueprint for creating objects with properties and methods, while an interface is a contract that describes the shape of an object, but doesn't provide an implementation.
    - A class can be instantiated, while an interface cannot.

ReadOnly 
    - We can add access modifiers to the properties of a class. TypeScript also provides a new access modifier called readonly.
    





